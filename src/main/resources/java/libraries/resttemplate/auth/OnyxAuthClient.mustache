package {{invokerPackage}}.auth;

import {{invokerPackage}}.config.OnyxConfig;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.*;
import org.springframework.stereotype.Component;
import org.springframework.util.LinkedMultiValueMap;
import org.springframework.util.MultiValueMap;
import org.springframework.web.client.RestTemplate;
import java.util.Map;

@Component
public class OnyxAuthClient {

public final String AUTH_GRANT_TYPE = "grant_type";
public final String AUTH_CLIENT_ID = "client_id";
public final String AUTH_CLIENT_SECRET = "client_secret";
public final String AUTH_SCOPE = "scope";
public final String AUTH_CLIENT_CREDENTIALS = "client_credentials";
public final String AUTH_OPEN_ID = "openid";
public final String AUTH_ACCESS_TOKEN = "access_token";

private String tokenUrl;

@Autowired
private RestTemplate restTemplate;

@Autowired
private OnyxConfig onyxConfig;

//@Cacheable(value = "bearerTokenMap", key="#userId.concat('_').concat(#appAction)")
public String getToken() {
    return generateToken();
}

private String generateToken(){

    MultiValueMap<String, String> request = new LinkedMultiValueMap<String, String>();
    request.add(AUTH_GRANT_TYPE, AUTH_CLIENT_CREDENTIALS);
    request.add(AUTH_CLIENT_ID, onyxConfig.getClientId());
    request.add(AUTH_CLIENT_SECRET, onyxConfig.getClientSecret());
    request.add(AUTH_SCOPE, AUTH_OPEN_ID);

    HttpHeaders headers = new HttpHeaders();
    headers.setContentType(MediaType.APPLICATION_FORM_URLENCODED);
    HttpEntity<MultiValueMap<String, String>> entity = new HttpEntity<MultiValueMap<String, String>>(request, headers);
    ResponseEntity<Object> response = null;

    try {
        response = restTemplate.exchange(onyxConfig.getTokenURL(), HttpMethod.POST, entity, Object.class);
    }catch (Exception e) {
        throw new RuntimeException("Exception occurred while generating the token ", e);
    }

    String idToken = ((Map<String, String>)response.getBody()).get(AUTH_ACCESS_TOKEN);
    if (idToken == null) {
        throw new RuntimeException("Unable to generate the token for client " + onyxConfig.getClientId());
    }

    return idToken;
    }
}